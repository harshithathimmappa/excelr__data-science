# -*- coding: utf-8 -*-
"""svm assign.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FfT4FF9A0IvenhyX2UcvHWf-Kor9O-rc

question 1 salary
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn import svm
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import classification_report

from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.model_selection import train_test_split, cross_val_score

sal_train=pd.read_csv("SalaryData_Train(1).csv")
sal_train.head(10)

sal_test=pd.read_csv('SalaryData_Test(1).csv')
sal_test.head(10)

sal_test.columns

sal_train.columns

string_col=['workclass','education','maritalstatus','occupation','relationship','race','sex','native']
string_col

from sklearn import preprocessing
label_encoder=preprocessing.LabelEncoder()
for i in string_col:
    sal_train[i]=label_encoder.fit_transform(sal_train[i])
    sal_test[i]=label_encoder.fit_transform(sal_test[i])

columns=list(sal_train.columns)
columns

train_x=sal_train[columns[0:13]]
train_x

train_y=sal_train[columns[13]]
train_y

test_x=sal_test[columns[0:13]]
test_x

test_y=sal_test[columns[13]]
test_y

train_x=sal_train.iloc[0:600,0:13]
train_y=sal_train.iloc[0:600,13]

test_x=sal_test.iloc[:,0:13]
test_y=sal_test.iloc[:,13]

"""## svm classification using kernels like: linear, poly,rbf"""

##3 kernel using linear

clf = SVC(kernel= "linear") 
clf.fit(train_x , train_y)

train_pred_lin = clf.predict(train_x)
test_pred_lin=clf.predict(test_x)

test_acc = accuracy_score(test_y, test_pred_lin) * 100
train_acc = accuracy_score(train_y, train_pred_lin) * 100

print("Accuracy =",train_acc )
print("Accuracy =",test_acc )

confusion_matrix(test_y, test_pred_lin)    
confusion_matrix(train_y, train_pred_lin)

## kernel using rbf

clf = SVC()
param_grid = [{'kernel':['rbf'],'gamma':[50,5,10,0.5],'C':[15,14,13,12,11,10,0.1,0.001] }]
gsv = GridSearchCV(clf,param_grid,cv=10)
gsv.fit(train_x,train_y)

gsv.best_params_ , gsv.best_score_

clf = SVC(C= 20, gamma = 50)
clf.fit(train_x , train_y)

train_pred_lin_1 = clf.predict(train_x)
test_pred_lin_1=clf.predict(test_x)

test_acc = accuracy_score(test_y, test_pred_lin_1) * 100
train_acc = accuracy_score(train_y, train_pred_lin_1) * 100

print(" test Accuracy =",test_acc)
print(" train Accuracy =", train_acc)

## poly

sal_test.shape

clf = SVC(kernel= "poly") 
clf.fit(train_x , train_y)

train_pred_lin_2 = clf.predict(train_x)
test_pred_lin_2=clf.predict(test_x)

test_acc = accuracy_score(test_y, test_pred_lin_2) * 100
train_acc = accuracy_score(train_y, train_pred_lin_2) * 100

print("train Accuracy =",train_acc)
print(" test Accuracy =", test_acc)

confusion_matrix(test_y, test_pred_lin_2)    
confusion_matrix(train_y, train_pred_lin_2)

##question2 forest

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn import svm
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import classification_report

forest=pd.read_csv("forestfires.csv")
forest

forest.shape

forest.dtypes

from sklearn import preprocessing
label_encoder=preprocessing.LabelEncoder()
forest['month']=label_encoder.fit_transform(forest['month'])
forest['day']=label_encoder.fit_transform(forest['day'])

columns=list(forest.columns)
columns

x=columns[0:30]
y=columns[30]

x

y

from sklearn.model_selection import train_test_split
train,test=train_test_split(forest,test_size=0.3,random_state=0)

##  kernel rbf

clf = SVC()
param_grid = [{'kernel':['rbf'],'gamma':[40,5,10,0.5],'C':[14,13,12,11,10,0.1,0.001] }]
gsv = GridSearchCV(clf,param_grid,cv=10)
gsv.fit(train[x],train[y])

gsv.best_params_ , gsv.best_score_

from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.model_selection import train_test_split, cross_val_score

clf = SVC(C= 15, gamma = 50)
clf.fit(train[x] , train[y])
y_pred = clf.predict(test[x])
acc = accuracy_score(test[y], y_pred) * 100
print("Accuracy =", acc)
confusion_matrix(test[y],y_pred)

## linear

clf = SVC(kernel= "linear") 
clf.fit(train[x] , train[y])
y_pred = clf.predict(test[x])
acc = accuracy_score(test[y], y_pred) * 100
print("Accuracy =", acc)
confusion_matrix(test[y], y_pred)

## poly

clf = SVC(kernel= "poly") 
clf.fit(train[x] , train[y])
y_pred = clf.predict(test[x])
acc = accuracy_score(test[y], y_pred) * 100
print("Accuracy =", acc)
confusion_matrix(test[y], y_pred)

